import json
import boto3
import botocore
import os
import requests

# generate failing response
def failResponse(err):
    return {
                    "statusCode": 400,
                    "body": json.dumps(err)
           }

# generate successfull response
def successResponse(message):
    return {
                    "statusCode": 200,
                    "body": json.dumps(message)
           }

# generate presigned url for downloading file from S3 bucket
def createPresignedUrl():
    BUCKET_NAME = os.environ['BUCKET_NAME']
    KEY = os.environ['BUCKET_FOLDER_PATH']
    BUCKET_FILE_NAME = os.environ['BUCKET_FILE_NAME']

    s3 = boto3.client('s3')

    try:
        print(BUCKET_NAME)
        print(KEY)
        response = s3.generate_presigned_url('get_object',
                                                    Params={'Bucket': BUCKET_NAME,
                                                            'Key': KEY},
                                                    ExpiresIn=86400)
    except ClientError:
        print("-=-=- Wasn't able to generate presigned url for config file S3. -=-=-")
        failResponse("Error of generation presigned url for config file S3.")

    # The response contains the presigned URL
    return response

# post build config in TeamCity's queue
def postBuild(presigned_url):
    TEAMCITY_URL = os.environ['TEAMCITY_URL']
    TEAMCITY_BUILD_ID = os.environ['TEAMCITY_BUILD_ID']
    TEAMCITY_TOKEN = os.environ['TEAMCITY_ACCESS_TOKEN']
    TEAMCITY_POST_URL = '{}/app/rest/buildQueue'.format(TEAMCITY_URL)
    TEAMCITY_REQUEST = {
          "buildType": {
            "id": TEAMCITY_BUILD_ID
          },
          "properties": {
            "property": [{
                "name": "teamcity.build.triggeredBy",
                "value": "AWS LAMBDA S3 EVENT"
              },
              {
                "name": "S3_CONFIG_FILE_URL",
                "value": presigned_url
              }
            ]
          }
    }

    TEAMCITY_HEADERS = {
        "Content-Type": "application/json",
        "Accept": "application/json",
        "Authorization": 'Bearer {}'.format(TEAMCITY_TOKEN)
    }

    try:
        response = requests.post(TEAMCITY_POST_URL, data=json.dumps(TEAMCITY_REQUEST), headers=TEAMCITY_HEADERS)
        response.raise_for_status()

    except requests.exceptions.HTTPError as error:
        print(error)
        failResponse("Error adding build config to queue in TeamCity.")

# handle event generated by S3 object creation
def handler(event, context):
    print("-=-=-= GOT EVENT -=-=-=-")
    print(event)

    # generate aws S3 presigned url for file with config
    PRESIGNED_URL = createPresignedUrl()

    # post build to TeamCity's build queue with link to presigned url
    postBuild(PRESIGNED_URL)

    successResponse("Posted build config to queue in TeamCity.")
